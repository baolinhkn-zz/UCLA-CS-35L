Baolinh Nguyen
TA: Farnoosh Javadi
UID: 104732121
CS 35L Lab 6
FILE: key1.txt

Exercise 1.1: Moving around in Emacs
C-s P U B L I C Enter
C-s L a b o r a t o r y C-s Enter M-b
C-s s e l f - r e f Enter M-b M-b
C-s a r r o w Enter M-b
C-e
C-a
M-<
C-x C-c

Exercise 1.2: Deleting text in Emacs
M-g g 18 C-k
C-s DELETE C-a C-k
C-s https://en. C-s C-a C-p C-u 3 C-k
C-s <! Enter C-b C-b C-SPC C-f C-f C-f C-f C-f C-f C-f C-w
C-s <! C-a C-k

Exercise 1.3: Inserting text in Emacs
M-% A s s i g n m e n t 1 Enter A s s i g n m e n t 3 7 y y q
M-< M-% U T F - 8 Enter U S - A S C I I Enter y q
C-s <!o Enter C-a C-o
C-x C-s Enter y e s
C-x C-c 

Exercise 1.4: Other editing tasks in Emacs
cat SP  e x e r 2 . h t m l SP 
e x e r 2 . d i f f SP  > e x e r 4 . h t m l Enter
emacs SP  e x e r 4 . h t m l Enter
M-> C-r -< Enter C-f C-SP C-e M-w M-g M-g 352 C-y
M-> C-r -< C-r Enter C-f C-SP C-e M-w M-g M-g 337 Enter C-p C-y C-n C-a C-k C-k
M-> C-r -< C-r C-r Enter C-f C-SP C-e M-w M-g M-g 300 C-n C-n Enter C-y 
M-> C-r -< C-r C-r Enter C-n C-f C-SP C-e M-w 300 C-n C-n C-n C-n Enter C-p C-y 
M-> C-r -< C-r C-r C-r Enter C-n C-n C-f C-SP C-e M-w C-g C-g 300 C-n C-n C-n
C-n C-n Enter C-p C-y
M-> C-r -< C-r C-r C-r Enter C-f C-SP C-e M-w M-g M-g 90 C-n C-n C-n C-y
M-> C-r -< C-r C-r C-r C-r Enter C-f C-SP C-n C-n C-e M-w M-g M-g 15 C-n C-n C-n
C-y
C-s --- C-s Enter C-a C-SP M-> C-w C-_ - - > C-r --- C-r Enter Enter C-p <!-- 
C-s --> Enter <!-- C-s --> Enter <!-- C-s --> Enter Enter <!-- Enter <!-- 
C-s --> Enter <!--
M-< M-x r e p l a c e - s t r i n g < o l > Enter < O l > Enter
C-x C-c y 
I replaced 7 occurrences of <ol>.


Exercise 1.5: Doing commands in Emacs
M-x m a k e - d i r e c t o r y Enter j u n k Enter
C-x C-f j u n k / h e l l o . c Enter
Copy and paste text from website 
C-x C-s
M-x compile
BKSP BKSP BKSP BKSP BKSP BKSP BKSP
g c c SP h e l l o . c Enter
C-x b h e l l o - o u t
C-u M-! . / a . o u t
C-SP M-> M-w
C-x C-f BKSP BKSP BKSP BKSP BKSP k e y 1 . t x t Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n,  n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6: Running Elisp code
C-x b * s c r a t c h * Enter
( r a n d o m ) C-j
( s e t q SP x SP (r a n d o m ) ) C-j
( s e t q SP y SP (r a n d o m ) ) C-j
( * x y )
(The answer I observed, -1681801678229706732, is not mathematically correct as
the two numbers I generated were positive numbers. This is due to overflow)
M-: ( * x y ) Enter 
(The answer remains the same but it now includes hexa and octa decimal
values. -1681801678229706732 (#o242510244430235464024, #x28a90a48c2766814))
6. The numbers generated are not truly random. 
They are generated using an algorithm that makes them appear to be random and 
thus, are pseudo-random.
7. A mathematical product of two numbers is correct when overflow does not
occur. The chance that overflow occurs can be determined using the following
process.
First let us consider the situation if we fix x. In that case, the possible
values for y that can be multiplied that will not cause overflow can be
approximated to be the following:
y(x) = 2^(62)/x + 1	  if x > 0
       2^(62)	       	  if x = 0
       2^(62)/(-x) + 1    if x < 0 .
This is because the possible min and max values of x and y are -2^61 to 2^61-1
according to the Emacs GNU manual. Thus, for each possible case, (x>0, x=0,
x<0), the range of y can be approximately the following:
      [-2^62/x, 2^62-1/x]   	    	if x > 0
      [-2^62, 2^62-1]			if x = 0
      [-2^62/(-x), (2^62-1)/(-x)]	if x < 0 .
This range was obtained by noting that the smallest possible number that can be
correctly multiplied with x is the number -2^62/x, this ensures that the number
is no larger than -2^62. This logic was applied to the largest possible number
as well. Therefore, y(x) can be used as an approximation for the possible range of values
y can obtain. Thus, the sum of all possibilities that an acceptable value of y
is possible for x ranging from -2^61 to 2^61-1 is the possibility of having a
CORRECT answer. Thus, subtracting that possibility from 1 will provide us the
probability of an INCORRECT answer.
To find that correct possibility, you can integrate the function y(x) from
-2^61 to 2^61-1, which considers all real numbers from -2^61 to -2^61-1. Then,
that number must be divided by 2^124, which is all possible numbers. This
yields: 1.86374896E-17. 
The possibility that overflow occurs is the following: 1-1.86374896E-1.
