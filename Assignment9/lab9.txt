NAME: Baolinh Nguyen
UID: 104732121
TA: Farnoosh Javadi
CS35L Lab 6:
FILE: lab9.txt

1. I first made sure to add GIT to the path variable using the command:
   export PATH=/usr/local/cs/bin:$PATH
   I then created a gitroot directory and obtained the Diffutils Git repository
   by using the following commands:
   mkdir gitroot
   cd gitroot
   git clone git://git.savannah.gnu.org/diffutils.git
2. To obtain the log of changes, I used the following command:
   cd diffutils
   git log > git-log.txt
3. To obtain the list of tags used for Diffutils, I used the following command:
   git tag > git-tags.txt
4. To look for the specific commit entitled "maint: quote 'like this' or "like
   this", not `like this'", I had to look in the git-log.txt file we generated
   previously.
   There, I searched for the text in emacs and found the following commit: 

commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800

    maint: quote 'like this' or "like this", not `like this'

    This is in response to a recent change in the GNU coding standards,
    which now suggest quoting 'like this' or "like this", instead of
    `like this' or ``like this''.
    * HACKING, NEWS, README, README-hacking, TODO, doc/diagmeet.note:
    * doc/diffutils.texi, ms/config.bat, ms/config.site:
    * src/analyze.c, src/cmp.c, src/context.c, src/diff.c:
    * src/diff.h, src/diff3.c, src/dir.c, src/ifdef.c, src/io.c:
    * src/sdiff.c, src/side.c, src/system.h, src/util.c:
    * tests/help-version:
    Quote 'like this' or "like this" in commentary.
    * cfg.mk (old_NEWS_hash): Adjust to reflect new NEWS quoting.
    * man/help2man: Update to 1.40.4 version, with quoting fixed as above.
    * po/en.po: Remove translation involving `, as it's no longer needed.
    * src/cmp.c (try_help, specify_ignore_initial, usage, main):
    * src/diff.c (main, try_help, option_help_msgid, specify_value)
    (compare_files):
    * src/diff3.c (main, try_help, option_help_msgid, usage)
    (read_diff):
    * src/dir.c (compare_names):
    * src/sdiff.c (try_help, usage, check_child_status, main):
    * src/util.c (finish_output):
    * tests/help-version:
    Quote 'like this' in output.

    To create a patch from this, I used the command: 
    git format-patch 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout >
    quote-patch.txt
    to generate the patch and put it in the quote-patch.txt file.
5. To checkout, I used the command
   git checkout -b 'myv3.0' 'v3.0'
6. Now, I want to apply the patch to version 3.0. I did this using the command:
   patch -p1 < quote-patch.txt
   Problems I encountered:
==================================
patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej

patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej

patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej

patching file doc/diagmeet.note
can't find file to patch at input line 249
1 out of 1 hunk ignored
can't find file to patch at input line 262

patching file src/diff.c
Hunk #1 succeeded at 40 with fuzz 2 (offset -2 lines).
Hunk #2 succeeded at 57 (offset -2 lines).
Hunk #3 succeeded at 92 (offset -2 lines).
Hunk #4 succeeded at 330 (offset -10 lines).
Hunk #5 succeeded at 505 (offset -10 lines).
Hunk #6 succeeded at 534 (offset -10 lines).
Hunk #7 succeeded at 585 (offset -14 lines).
Hunk #8 succeeded at 744 (offset -14 lines).
Hunk #9 succeeded at 826 (offset -14 lines).
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
Hunk #13 succeeded at 960 with fuzz 2 (offset -29 lines).
Hunk #14 succeeded at 1159 with fuzz 2 (offset -32 lines).
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej

patching file src/diff3.c
Hunk #1 succeeded at 35 (offset 1 line).
Hunk #2 succeeded at 159 (offset 1 line).
Hunk #3 succeeded at 316 (offset 1 line).
Hunk #4 succeeded at 351 (offset 1 line).
Hunk #5 succeeded at 412 (offset 1 line).
Hunk #6 FAILED at 433.
Hunk #7 succeeded at 460 with fuzz 2 (offset -18 lines).
Hunk #8 succeeded at 1275 (offset -18 lines).
Hunk #9 succeeded at 1475 (offset -18 lines).
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej
==================================
   Looking at the .rej files that were generated, I noted that the failures
   occured because the characters ' and ` are different and these
   differences could not be resolved.

7. I looked at what happened by using the git status command:
==================================
On branch myv3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   NEWS
  modified:   README
  modified:   TODO
  modified:   doc/diagmeet.note
  modified:   ms/config.bat
  modified:   ms/config.site
  modified:   po/en.po
  modified:   src/analyze.c
  modified:   src/cmp.c
  modified:   src/context.c
  modified:   src/diff.c
  modified:   src/diff.h
  modified:   src/diff3.c
  modified:   src/dir.c
  modified:   src/ifdef.c
  modified:   src/io.c
  modified:   src/sdiff.c
  modified:   src/side.c
  modified:   src/system.h
  modified:   src/util.c
  modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

  NEWS.orig
  README-hacking.orig
  README-hacking.rej
  README.orig
  README.rej
  cfg.mk.orig
  cfg.mk.rej
  ms/config.site.orig
  src/cmp.c.orig
  src/context.c.orig
  src/diff.c.orig
  src/diff.c.rej
  src/diff.h.orig
  src/diff3.c.orig
  src/diff3.c.rej
  src/dir.c.orig
  src/sdiff.c.orig
  src/system.h.orig
  src/util.c.orig
  tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")
==================================

8. I had to look at the vc-diff and vc-revert functions. The vc-diff function in
   emacs (C-x v =) compares a previous version. The vc-revert function (C-x v u)
   will revert the current file to the last revision.
   I can look into this by opening one of the files we modified
   emacs README
   C-x v =
   I see that the *vc-diff* buffer is opened, showing the differences between
   the two versions of files. I can look into the functions that I can use by
   going into describe-mode (C-h m)
   There, I see several different functions that can be used. The ones that are
   of interest are diff-apply-hunk (C-c C-a)and diff-goto-source (C-c C-c).
   I can apply the hunk by using C-c C-a -- essentially applying the changes --
   or I can go to the source file and line corresponding to the hunk in question.
9. To revert changes in the files NEWS, README, TODO, doc/diagmeet.note,
   ms/config.bat, ms/config.site, po/en.po, src/diff.h, src/system.h,
   tests/help-version, I opened each in emacs and used the vc-revert (C-x v u)
   command to revert the files back.
   Now, I can look at the .c files that were changed: src/analyze.c, src/cmp.c,
   src/context.c, src/diff.c, src/diff3.c, src/dir.c, src/ifdef.c, src/io.c,
   src/sdiff.c, src/side.c, src/util.c.
   What we want for these files is to change only constant character strings,
   meaning not the source code. To do this, I have to look at every *vc-diff*
   buffer manually and determine whether or not to keep the patch (C-c C-a) or
   to discard it (C-u C-c C-a).
   
   Lines that were changed:
   analyze.c: all
   cmp.c: 36, 364, 377
   context.c: all
   diff.c: 40, 57, 92
   diff3.c: 35, 159, 1475
   dir.c: 87, 125, 234, 
   ifdef.c: all
   io.c: all
   sdiff.c: 35, 92, 747
   side.c: all
   util.c: 27, 121, 146, 190, 241, 270, 650

10. Now I have to manually apply changes to the rejected patches which were:
    diff.c and diff3.c. 
    I did this by looking at the diff.c.rej file and manually changing it.
    I did this again with the diff3.c file and manually changing it as well.
    The issues were with the inconsistencies with line number between the files,
    therefore, I had to manually search and replace each ` with a ' for those
    lines.
11. Now I want to remove all untracked files. I can see which files are
    untracked using the command: 
    git clean -n
    I then look at the files and make sure that those are the ones I am
    comfortable deleting. Then I use the following command:
    git clean -f
    to delete them.
12. I now check the modified files. git status returns the following:

#   modified:   src/cmp.c
#   modified:   src/diff.c
#   modified:   src/diff3.c
#   modified:   src/dir.c
#   modified:   src/sdiff.c
#   modified:   src/util.c

    This is exactly six files. I want to put the patch into a diff file so I run
    the following:
    git diff > quote-3.0-patch.txt
13. I now want to build the modified version of diffutils. Since I am on
    lnxsrv09, I have to install an additional patch after running:
    ./bootstrap
    I can install the patch by putting the diff file on my server and running
    the command:
    patch -p0 < diffutils-gets.diff
    After that, I can run:
    ./configure
    make
    I can now verify that diff does the right thing:
    diff . -
    diff: cannot compare '-' to a directory

    diff --help
    ...
    FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
    ...
    I see that the patch I have installed works correctly. 
14. I can now do a sanity check. 
    I do this by returning to my gitroot directory and creating two directories:
    diffutils-3.0-patch
    diffutils-3.0
    I can then go into the src directory of the patched diffutils and copy all
    source code into diffutils3.0patch
    cp * ../../diffutils-3.0-patch
    Now I can get the original version, which I had called v3.0:
    git checkout -f v3.0
    cp * ../../diffutils-3.0
    I then compared the two commands: 
    diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt
16. Once there, I can compare the quote-3.0-test.txt and quote-3.0-patch.txt
    files. 
    diff quote-3.0-patch.txt quote-3.0-test.txt
    I see that the differences are innocuous and I am done.
